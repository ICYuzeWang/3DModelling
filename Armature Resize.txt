import bpy
import bmesh

def calculate_volume(mesh):
    bm = bmesh.new()
    bm.from_mesh(mesh)
    volume = bm.calc_volume()
    bm.free()
    return volume

def duplicate_mesh_and_calculate_volume(mesh, delete_mesh=True):
    mesh_copy = mesh.copy()
    mesh_copy.data = mesh_copy.data.copy()
    bpy.context.collection.objects.link(mesh_copy)
    mesh_copy.select_set(True)
    bpy.context.view_layer.objects.active = mesh_copy

    for modifier in mesh_copy.modifiers:
        if modifier.type == 'ARMATURE':
            bpy.ops.object.modifier_apply(modifier=modifier.name)

    volume = calculate_volume(mesh_copy.data)
    
    if delete_mesh:
        bpy.data.objects.remove(mesh_copy)
    return volume

def scale_bone_and_mesh(armature, bone_name, scale_factor, frame):
    bpy.context.view_layer.objects.active = armature
    bpy.ops.object.mode_set(mode='POSE')
    bone = armature.pose.bones[bone_name]
    bone.scale = scale_factor
    bone.keyframe_insert(data_path='scale', frame=frame)
    bpy.ops.object.mode_set(mode='OBJECT')

def adjust_scaling_factors(scaling_factors, target_volume, mesh, max_generations=300):
    current_volume = duplicate_mesh_and_calculate_volume(mesh)
    generation_count = 0

    while round(current_volume, 3) != round(target_volume, 3) and generation_count < max_generations:
        for bone_name, factors in scaling_factors.items():
            scale_bone_and_mesh(armature, bone_name, factors['iteration'], frame=generation_count)
            factors['iteration'] = tuple(a - b for a, b in zip(factors['iteration'], factors['tolerance']))
        
        bpy.context.view_layer.update()
        delete_mesh = generation_count < max_generations - 1
        current_volume = duplicate_mesh_and_calculate_volume(mesh, delete_mesh)
        generation_count += 1
        print(f"Generation {generation_count}: Current volume = {current_volume}")

    return scaling_factors, current_volume, generation_count

# Calculate the percentage reduction for each part
def calculate_percentage_reduction(original, current):
    return (original - current) / original * 100

# Calculate the percentage left for each part
def calculate_percentage_left(reduction_percentage):
    return 100 - reduction_percentage

armature = bpy.data.objects['Armature']
mesh = bpy.data.objects['mesh']

original_volume = calculate_volume(mesh.data)
target_volume = original_volume * 0.8  # Change this to your desired proportion

scaling_factors = { 
    'Head': {'iteration': (1, 1, 1), 'tolerance': (0.00039, 0, 0.00039)},
    'Neck': {'iteration': (1, 1, 1), 'tolerance': (0.00143, 0, 0.00143)},
    'Chest': {'iteration': (1, 1, 1), 'tolerance': (0.00178, 0, 0.00178)},
    'Abdomen': {'iteration': (1, 1, 1), 'tolerance': (0.00205, 0, 0.00205)},
    'Buttock': {'iteration': (1, 1, 1), 'tolerance': (0.00228, 0, 0.00228)},
    'Left_large_arm': {'iteration': (1, 1, 1), 'tolerance': (0.00156, 0, 0.00156)},
    'Right_large_arm': {'iteration': (1, 1, 1), 'tolerance': (0.00156, 0, 0.00156)},
    'Right_small_arm': {'iteration': (1, 1, 1), 'tolerance': (0.00078, 0, 0.00078)},
    'Left_small_arm': {'iteration': (1, 1, 1), 'tolerance': (0.00078, 0, 0.00078)},
    'Left_hand': {'iteration': (1, 1, 1), 'tolerance': (0.00039, 0, 0.00039)},
    'Right_hand': {'iteration': (1, 1, 1), 'tolerance': (0.00039, 0, 0.00039)},
    'Left_thigh': {'iteration': (1, 1, 1), 'tolerance': (0.00156, 0, 0.00156)},
    'Left_calf': {'iteration': (1, 1, 1), 'tolerance': (0.00078, 0, 0.00078)},
    'Left_foot': {'iteration': (1, 1, 1), 'tolerance': (0.00039, 0, 0.00039)},
    'Right_thigh': {'iteration': (1, 1, 1), 'tolerance': (0.00156, 0, 0.00156)},
    'Right_calf': {'iteration': (1, 1, 1), 'tolerance': (0.00078, 0, 0.00078)},
    'Right_foot': {'iteration': (1, 1, 1), 'tolerance': (0.00039, 0, 0.00039)},  
}

adjusted_scaling_factors, final_volume, generation_count = adjust_scaling_factors(scaling_factors, target_volume, mesh)

print("Original volume:", original_volume)
print("Final volume:", final_volume)
print("Generation count:", generation_count)

print("\nResults:\n")
for bone_name, factors in adjusted_scaling_factors.items():
    original_scale = (1, 1, 1)
    reduction_percentages = [calculate_percentage_reduction(o, c) for o, c in zip(original_scale, factors['iteration'])]
    percentages_left = [calculate_percentage_left(p) for p in reduction_percentages]
    
    print(f"{bone_name}:")
    print(f"    final scale = {factors['iteration']}")
    print(f"    reduction percentages = {reduction_percentages}")
    print(f"    percentages left = {percentages_left}")
    print("\n")
